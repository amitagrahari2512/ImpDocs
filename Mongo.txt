https://docs.mongodb.com/manual/reference/method/db.collection.update/

https://docs.mongodb.com/manual/reference/method/db.collection.aggregate/

Command for csv dump in mongo = mongoimport --db users --collection contacts --type csv --headerline --file /opt/backups/contacts.csv 
mongoimport --db <Db_Name> --collection <Collection_Name> --type csv --headerline --file <csv_file.csv>

Get_Schema_Info

var schematodo = db.CollectioNName.findOne();
for (var key in schematodo) { print (key , typeof key) ; }

query:

> show dbs
SPR_GLOBAL  0.001GB
SPR_RED     0.020GB
local       0.000GB
serverInfo  0.000GB
test        0.000GB
testdb      0.000GB
> use temp
switched to db temp
>
>
> show tables;
> show collections
>
>
> db.student.insert({a: 1, b: 2})
WriteResult({ "nInserted" : 1 })
>
>
> db.student.count()
1
> db.student.find()
{ "_id" : ObjectId("5bb504d33f15cb0208bae2d0"), "a" : 1, "b" : 2 }
>
>
> db.student.insert({a: 1, b: 2, c: 3})
WriteResult({ "nInserted" : 1 })
> db.student.find()
{ "_id" : ObjectId("5bb504d33f15cb0208bae2d0"), "a" : 1, "b" : 2 }
{ "_id" : ObjectId("5bb5050d3f15cb0208bae2d1"), "a" : 1, "b" : 2, "c" : 3 }
>
>
>
>
> db.student.ensureIndex({a: 1})
{
	"createdCollectionAutomatically" : false,
	"numIndexesBefore" : 1,
	"numIndexesAfter" : 2,
	"ok" : 1
}
>
>
>
> db.student.getIndexes()
[
	{
		"v" : 1,
		"key" : {
			"_id" : 1
		},
		"name" : "_id_",
		"ns" : "temp.student"
	},
	{
		"v" : 1,
		"key" : {
			"a" : 1
		},
		"name" : "a_1",
		"ns" : "temp.student"
	}
]
>
>
>
> db.student.find()
{ "_id" : ObjectId("5bb504d33f15cb0208bae2d0"), "a" : 1, "b" : 2 }
{ "_id" : ObjectId("5bb5050d3f15cb0208bae2d1"), "a" : 1, "b" : 2, "c" : 3 }
> db.student.delete({c: 3})
2018-10-03T23:37:30.029+0530 E QUERY    [thread1] TypeError: db.student.delete is not a function :
@(shell):1:1

> db.student.remove({c: 3})
WriteResult({ "nRemoved" : 1 })
>
>
> db.student.find()
{ "_id" : ObjectId("5bb504d33f15cb0208bae2d0"), "a" : 1, "b" : 2 }
> db.student.find()
{ "_id" : ObjectId("5bb504d33f15cb0208bae2d0"), "a" : 1, "b" : 2 }
> db.student.update({a: 1}, {$set: {d: 3}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.student.find()
{ "_id" : ObjectId("5bb504d33f15cb0208bae2d0"), "a" : 1, "b" : 2, "d" : 3 }
> db.student.update({a: 1}, {$set: {a: 5}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.student.find()
{ "_id" : ObjectId("5bb504d33f15cb0208bae2d0"), "a" : 5, "b" : 2, "d" : 3 }
> db.student.update({a: 1}, {$unset: {d: 1}})
WriteResult({ "nMatched" : 0, "nUpserted" : 0, "nModified" : 0 })
> db.student.find()
{ "_id" : ObjectId("5bb504d33f15cb0208bae2d0"), "a" : 5, "b" : 2, "d" : 3 }
> db.student.update({a: 1}, {$unset: {d: -1}})
WriteResult({ "nMatched" : 0, "nUpserted" : 0, "nModified" : 0 })
> db.student.update({a: 5}, {$unset: {d: 1}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.student.find()
{ "_id" : ObjectId("5bb504d33f15cb0208bae2d0"), "a" : 5, "b" : 2 }
> db.student.update({a: 5}, {$set: {d: 3}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.student.find()
{ "_id" : ObjectId("5bb504d33f15cb0208bae2d0"), "a" : 5, "b" : 2, "d" : 3 }
> db.student.update({}, {$set: {d: 3}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 0 })
>
> db.student.find()
{ "_id" : ObjectId("5bb504d33f15cb0208bae2d0"), "a" : 5, "b" : 2, "d" : 3 }
> db.student.update({}, {$set: {d: 3}}, false, true)
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 0 })
> db.student.find()
{ "_id" : ObjectId("5bb504d33f15cb0208bae2d0"), "a" : 5, "b" : 2, "d" : 3 }
>
>
>
> db.student.insert({p:2, q: 5})
WriteResult({ "nInserted" : 1 })
> db.student.find()
{ "_id" : ObjectId("5bb504d33f15cb0208bae2d0"), "a" : 5, "b" : 2, "d" : 3 }
{ "_id" : ObjectId("5bb506293f15cb0208bae2d2"), "p" : 2, "q" : 5 }
>
> db.student.insert({p:2, q: [1,2,3]})
WriteResult({ "nInserted" : 1 })
> db.student.find()
{ "_id" : ObjectId("5bb504d33f15cb0208bae2d0"), "a" : 5, "b" : 2, "d" : 3 }
{ "_id" : ObjectId("5bb506293f15cb0208bae2d2"), "p" : 2, "q" : 5 }
{ "_id" : ObjectId("5bb506553f15cb0208bae2d3"), "p" : 2, "q" : [ 1, 2, 3 ] }
> db.student.update({}, {$set: {d: 5}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.student.find()
{ "_id" : ObjectId("5bb504d33f15cb0208bae2d0"), "a" : 5, "b" : 2, "d" : 5 }
{ "_id" : ObjectId("5bb506293f15cb0208bae2d2"), "p" : 2, "q" : 5 }
{ "_id" : ObjectId("5bb506553f15cb0208bae2d3"), "p" : 2, "q" : [ 1, 2, 3 ] }
> db.student.update({}, {$set: {d: 5}}, false, true)
WriteResult({ "nMatched" : 3, "nUpserted" : 0, "nModified" : 2 })
> db.student.find()
{ "_id" : ObjectId("5bb504d33f15cb0208bae2d0"), "a" : 5, "b" : 2, "d" : 5 }
{ "_id" : ObjectId("5bb506293f15cb0208bae2d2"), "p" : 2, "q" : 5, "d" : 5 }
{ "_id" : ObjectId("5bb506553f15cb0208bae2d3"), "p" : 2, "q" : [ 1, 2, 3 ], "d" : 5 }
> db.student.update({g: 4}, {$set: {d: 5}}, false, true)
WriteResult({ "nMatched" : 0, "nUpserted" : 0, "nModified" : 0 })
> db.student.find()
{ "_id" : ObjectId("5bb504d33f15cb0208bae2d0"), "a" : 5, "b" : 2, "d" : 5 }
{ "_id" : ObjectId("5bb506293f15cb0208bae2d2"), "p" : 2, "q" : 5, "d" : 5 }
{ "_id" : ObjectId("5bb506553f15cb0208bae2d3"), "p" : 2, "q" : [ 1, 2, 3 ], "d" : 5 }
> db.student.update({g: 4}, {$set: {d: 5}}, true, true)
WriteResult({
	"nMatched" : 0,
	"nUpserted" : 1,
	"nModified" : 0,
	"_id" : ObjectId("5bb506f4c1ef5894e3379f69")
})
> db.student.find()
{ "_id" : ObjectId("5bb504d33f15cb0208bae2d0"), "a" : 5, "b" : 2, "d" : 5 }
{ "_id" : ObjectId("5bb506293f15cb0208bae2d2"), "p" : 2, "q" : 5, "d" : 5 }
{ "_id" : ObjectId("5bb506553f15cb0208bae2d3"), "p" : 2, "q" : [ 1, 2, 3 ], "d" : 5 }
{ "_id" : ObjectId("5bb506f4c1ef5894e3379f69"), "g" : 4, "d" : 5 }
> db.student.find()
{ "_id" : ObjectId("5bb504d33f15cb0208bae2d0"), "a" : 5, "b" : 2, "d" : 5 }
{ "_id" : ObjectId("5bb506293f15cb0208bae2d2"), "p" : 2, "q" : 5, "d" : 5 }
{ "_id" : ObjectId("5bb506553f15cb0208bae2d3"), "p" : 2, "q" : [ 1, 2, 3 ], "d" : 5 }
{ "_id" : ObjectId("5bb506f4c1ef5894e3379f69"), "g" : 4, "d" : 5 }
> db.student.save({"_id" : ObjectId("5bb504d33f15cb0208bae2d0"), "a" : 5, "b" : 2, "d" : 7 }})
2018-10-03T23:49:14.762+0530 E QUERY    [thread1] SyntaxError: missing ) after argument list @(shell):1:90

> db.student.save({"_id" : ObjectId("5bb504d33f15cb0208bae2d0"), "a" : 5, "b" : 2, "d" : 7 })
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.student.find()
{ "_id" : ObjectId("5bb504d33f15cb0208bae2d0"), "a" : 5, "b" : 2, "d" : 7 }
{ "_id" : ObjectId("5bb506293f15cb0208bae2d2"), "p" : 2, "q" : 5, "d" : 5 }
{ "_id" : ObjectId("5bb506553f15cb0208bae2d3"), "p" : 2, "q" : [ 1, 2, 3 ], "d" : 5 }
{ "_id" : ObjectId("5bb506f4c1ef5894e3379f69"), "g" : 4, "d" : 5 }
> db.student.save({"a" : 5, "b" : 2, "d" : 7 })
WriteResult({ "nInserted" : 1 })
> db.student.find()
{ "_id" : ObjectId("5bb504d33f15cb0208bae2d0"), "a" : 5, "b" : 2, "d" : 7 }
{ "_id" : ObjectId("5bb506293f15cb0208bae2d2"), "p" : 2, "q" : 5, "d" : 5 }
{ "_id" : ObjectId("5bb506553f15cb0208bae2d3"), "p" : 2, "q" : [ 1, 2, 3 ], "d" : 5 }
{ "_id" : ObjectId("5bb506f4c1ef5894e3379f69"), "g" : 4, "d" : 5 }
{ "_id" : ObjectId("5bb508383f15cb0208bae2d4"), "a" : 5, "b" : 2, "d" : 7 }
>
>
>
>
>
>
> db.student.find().limit(2)
{ "_id" : ObjectId("5bb504d33f15cb0208bae2d0"), "a" : 5, "b" : 2, "d" : 7 }
{ "_id" : ObjectId("5bb506293f15cb0208bae2d2"), "p" : 2, "q" : 5, "d" : 5 }
> db.student.find().limit(2).sort({d: 1})
{ "_id" : ObjectId("5bb506293f15cb0208bae2d2"), "p" : 2, "q" : 5, "d" : 5 }
{ "_id" : ObjectId("5bb506553f15cb0208bae2d3"), "p" : 2, "q" : [ 1, 2, 3 ], "d" : 5 }
> db.student.find().sort({d: 1})
{ "_id" : ObjectId("5bb506293f15cb0208bae2d2"), "p" : 2, "q" : 5, "d" : 5 }
{ "_id" : ObjectId("5bb506553f15cb0208bae2d3"), "p" : 2, "q" : [ 1, 2, 3 ], "d" : 5 }
{ "_id" : ObjectId("5bb506f4c1ef5894e3379f69"), "g" : 4, "d" : 5 }
{ "_id" : ObjectId("5bb504d33f15cb0208bae2d0"), "a" : 5, "b" : 2, "d" : 7 }
{ "_id" : ObjectId("5bb508383f15cb0208bae2d4"), "a" : 5, "b" : 2, "d" : 7 }
> db.student.find().sort({d: -1})
{ "_id" : ObjectId("5bb504d33f15cb0208bae2d0"), "a" : 5, "b" : 2, "d" : 7 }
{ "_id" : ObjectId("5bb508383f15cb0208bae2d4"), "a" : 5, "b" : 2, "d" : 7 }
{ "_id" : ObjectId("5bb506293f15cb0208bae2d2"), "p" : 2, "q" : 5, "d" : 5 }
{ "_id" : ObjectId("5bb506553f15cb0208bae2d3"), "p" : 2, "q" : [ 1, 2, 3 ], "d" : 5 }
{ "_id" : ObjectId("5bb506f4c1ef5894e3379f69"), "g" : 4, "d" : 5 }
> db.student.find().sort({d: -1}).limit(2)
{ "_id" : ObjectId("5bb504d33f15cb0208bae2d0"), "a" : 5, "b" : 2, "d" : 7 }
{ "_id" : ObjectId("5bb508383f15cb0208bae2d4"), "a" : 5, "b" : 2, "d" : 7 }
> db.student.find().sort({d: -1}).


> db.student.find()
{ "_id" : ObjectId("5bb504d33f15cb0208bae2d0"), "a" : 5, "b" : 2, "d" : 7 }
{ "_id" : ObjectId("5bb506293f15cb0208bae2d2"), "p" : 2, "q" : 5, "d" : 5 }
{ "_id" : ObjectId("5bb506553f15cb0208bae2d3"), "p" : 2, "q" : [ 1, 2, 3 ], "d" : 5 }
{ "_id" : ObjectId("5bb506f4c1ef5894e3379f69"), "g" : 4, "d" : 5 }
{ "_id" : ObjectId("5bb508383f15cb0208bae2d4"), "a" : 5, "b" : 2, "d" : 7 }
> db.student.aggregate([{}, {$group: {_id: "$a"}}])
assert: command failed: {
	"ok" : 0,
	"errmsg" : "A pipeline stage specification object must contain exactly one field.",
	"code" : 16435
} : aggregate failed
_getErrorWithCode@src/mongo/shell/utils.js:25:13
doassert@src/mongo/shell/assert.js:16:14
assert.commandWorked@src/mongo/shell/assert.js:290:5
DBCollection.prototype.aggregate@src/mongo/shell/collection.js:1312:5
@(shell):1:1

2018-10-03T23:56:06.096+0530 E QUERY    [thread1] Error: command failed: {
	"ok" : 0,
	"errmsg" : "A pipeline stage specification object must contain exactly one field.",
	"code" : 16435
} : aggregate failed :
_getErrorWithCode@src/mongo/shell/utils.js:25:13
doassert@src/mongo/shell/assert.js:16:14
assert.commandWorked@src/mongo/shell/assert.js:290:5
DBCollection.prototype.aggregate@src/mongo/shell/collection.js:1312:5
@(shell):1:1

> db.student.aggregate([{$group: {_id: "$a"}}])
{ "_id" : null }
{ "_id" : 5 }
>
>
>
> db.student.aggregate([{$group: {_id: "$a", count: {$sum: 1}}}])
{ "_id" : null, "count" : 3 }
{ "_id" : 5, "count" : 2 }
> db.student.aggregate([{$group: {id: "$a", count: {$sum: 1}}}, {$sort: {id: 1}}])
{ "_id" : null, "count" : 3 }
{ "_id" : 5, "count" : 2 }
> db.student.aggregate([{$group: {id: "$a", count: {$sum: 1}}}, {$sort: {id: -1}}])
{ "_id" : 5, "count" : 2 }
{ "_id" : null, "count" : 3 }
> db.student.aggregate([{$group: {id: "$a", count: {$sum: 1}}}, {$sort: {id: -1}}, {limit: 1}])
assert: command failed: {
	"ok" : 0,
	"errmsg" : "Unrecognized pipeline stage name: 'limit'",
	"code" : 16436
} : aggregate failed
_getErrorWithCode@src/mongo/shell/utils.js:25:13
doassert@src/mongo/shell/assert.js:16:14
assert.commandWorked@src/mongo/shell/assert.js:290:5
DBCollection.prototype.aggregate@src/mongo/shell/collection.js:1312:5
@(shell):1:1

2018-10-03T23:58:37.273+0530 E QUERY    [thread1] Error: command failed: {
	"ok" : 0,
	"errmsg" : "Unrecognized pipeline stage name: 'limit'",
	"code" : 16436
} : aggregate failed :
_getErrorWithCode@src/mongo/shell/utils.js:25:13
doassert@src/mongo/shell/assert.js:16:14
assert.commandWorked@src/mongo/shell/assert.js:290:5
DBCollection.prototype.aggregate@src/mongo/shell/collection.js:1312:5
@(shell):1:1

> db.student.aggregate([{$group: {id: "$a", count: {$sum: 1}}}, {$sort: {id: -1}}, {$limit: 1}])
{ "_id" : 5, "count" : 2 }
>
>



Create Dummy Data:

for (var i =0; i< 100; i++) { print("value is =>" + i); db.test.insert({a: i, b: i+1})}
